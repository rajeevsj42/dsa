#include <stdio.h>
#include <stdlib.h>
typedef struct Node
{
    int data;
    struct Node *next;
} Node;
Node *front = NULL;
Node *rear = NULL;
void enqueue(int ele)
{
    Node *temp = (Node *)malloc(sizeof(Node));
    if (temp == NULL)
        printf("Queue Overflow \n");
    else
    {
        temp->data = ele;
        temp->next = NULL;
        if (front == NULL)
        {
            front = rear = temp;
        }
        else
        {
            rear->next = temp;
            rear = temp;
        }
        printf("Enqueue Successful\n");
    }
}
void dequeue()
{
    if (front == NULL)
        printf("Queue Underflow \n");
    else if (front == rear)
        front = rear = NULL;
    else
    {
        Node*t=front;
        front=front->next;
        printf("Dequeued : %d",t->data);
        free(t);
    }
}
int peek()
{
    if (front == NULL)
    {
        printf("Queue Empty");
        return -1;
    }
    else
        return front->data;
}
void display()
{
    if (front == NULL)
        printf("Queue Empty \n");
    else
    {
        printf("Elements are : ");
        Node *temp = front;
        while (temp != NULL)
        {
            printf("%d ", temp->data);
            temp = temp->next;
        }
    }
}
int main()
{
    while (1)
    {
        printf("1.Enqueue\n2.Dequeue\n3.Peek\n4.Show\n5.Exit\nEnter choice : ");
        int choice, ele;
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter data : ");
            scanf("%d", &ele);
            enqueue(ele);
            break;
        case 2:
            dequeue();
            break;
        case 3:
            if (peek() != -1)
                printf("Topmost Element : %d", peek());
            break;
        case 4:
            display();
            break;
        case 5:
            exit(0);
            break;
        default:
            ("Printf Invalid Choice !!!\n");
        }
        printf("\n");
        system("pause");
    }
    return 0;
}
