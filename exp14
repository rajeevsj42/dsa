#include <stdio.h>
#include <stdlib.h>

#define MAX 100
int tree[MAX], size = 0;

int findmin(int i)
{
    while (i < MAX && tree[2 * i + 1] != -1)
        i = 2 * i + 1;
    return i;
}

int findmax(int i)
{
    while (i < MAX && tree[2 * i + 2] != -1)
        i = 2 * i + 2;
    return i;
}
void insert(int ele, int root)
{
    if (tree[root] == -1)
    {
        tree[root] = ele;
        size++;
    }
    else if (ele < tree[root])
        insert(ele, 2 * root + 1);
    else if (ele > tree[root])
        insert(ele, 2 * root + 2);
}
void preOrder(int root)
{
    if (tree[root] != -1)
    {
        printf("%d ", tree[root]);
        preOrder(2 * root + 1);
        preOrder(2 * root + 2);
    }
}
void inOrder(int root)
{
    if (tree[root] != -1)
    {
        inOrder(2 * root + 1);
        printf("%d ", tree[root]);
        inOrder(2 * root + 2);
    }
}
void postOrder(int root)
{
    if (tree[root] != -1)
    {
        postOrder(2 * root + 1);
        postOrder(2 * root + 2);
        printf("%d ", tree[root]);
    }
}
int search(int target, int i)
{
    if (i >= MAX && tree[i] == -1)
        return -1;
    else if (tree[i] == target)
        return i;
    else if (target < tree[i])
        search(target, 2 * i + 1);
    else
        search(target, 2 * i + 2);
}
void delete(int value)
{
    int i = search(value, 0);
    if (i == -1)
        printf("Element Not Found !!\n");
    else
    {
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if ((left >= MAX || tree[left] == -1) && (right >= MAX || tree[right] == -1))
            tree[i] = -1;
        else if(tree[left]==-1)//only right child
        {
            int min=findmin(right);
            tree[i]=tree[min];
            delete(tree[min]);
        }
        else if(tree[right]==-1)//only left child
        {
            int max=findmax(left);
            tree[i]=tree[max];
            delete(tree[max]);
        }
        else//both child
        {
            int min=findmin(right);
            tree[i]=tree[min];
            delete(tree[min]);
        }
        printf("Deleted Successfully\n");
    }
}
void init()
{
    for (int i = 0; i < MAX; i++)
    {
        tree[size++] = -1;
    }
}
int main()
{
    while (1)
    {
        int choice, ele;
        printf("==== Binary Search Tree ====\n");
        printf("1.Insert\n2.Preorder\n3.Inorder\n4.Postorder\n5.Delete\n6.Search\n7.Exit\n");
        printf("Enter Choice :");
        scanf("%d", &choice);
        init();
        switch (choice)
        {
        case 1:
            printf("Enter Element : ");
            scanf("%d", &ele);
            insert(ele, 0);
            break;
        case 2:
            printf("Pre-order : ");
            preOrder(0);
            break;
        case 3:
            printf("In-order : ");
            inOrder(0);
            break;
        case 4:
            printf("Post-order : ");
            postOrder(0);
            break;
        case 5:
            printf("Enter Value : ");
            scanf("%d", &ele);
            delete(ele);
            break;
        case 6:
            printf("Enter element : ");
            scanf("%d", &ele);
            int res = search(ele, 0);
            if (res == -1)
                printf("Element Not Found \n");
            else
                printf("%d ", res);
            break;
        case 7:
            exit(0);
            break;
        default:
            printf("Invalid Choice\n");
            break;
        }
        printf("\n");
    }
    return 0;
}
